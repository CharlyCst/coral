diff --git a/compiler/rustc_target/src/spec/mod.rs b/compiler/rustc_target/src/spec/mod.rs
index 92678aed5b1..8ce7c3a6b1d 100644
--- a/compiler/rustc_target/src/spec/mod.rs
+++ b/compiler/rustc_target/src/spec/mod.rs
@@ -1023,6 +1023,8 @@ fn $module() {
     ("x86_64-unknown-none", x86_64_unknown_none),
 
     ("mips64-openwrt-linux-musl", mips64_openwrt_linux_musl),
+
+    ("x86_64-coral-unknown-kernel", x86_64_coral_unknown_kernel),
 }
 
 /// Warnings encountered when parsing the target `json`.
diff --git a/compiler/rustc_target/src/spec/x86_64_coral_unknown_kernel.rs b/compiler/rustc_target/src/spec/x86_64_coral_unknown_kernel.rs
new file mode 100644
index 00000000000..601e34655cc
--- /dev/null
+++ b/compiler/rustc_target/src/spec/x86_64_coral_unknown_kernel.rs
@@ -0,0 +1,43 @@
+// Generic x86-64 target for bare-metal code - Floating point disabled
+//
+// Can be used in conjunction with the `target-feature` and
+// `target-cpu` compiler flags to opt-in more hardware-specific
+// features.
+//
+// NOTE: Derived from x86_64_unknown_none.
+
+use super::{Endian, LinkerFlavor, LldFlavor, PanicStrategy, Target, TargetOptions};
+
+pub fn target() -> Target {
+    let opts = TargetOptions {
+        env: "kernel".to_string(),
+        vendor: "coral".to_string(),
+        os: "unknwon".to_string(),
+        cpu: "x86-64".to_string(),
+        max_atomic_width: Some(64),
+        endian: Endian::Little,
+        c_int_width: "32".to_string(),
+
+        // don't use probe-stack=inline-asm until rust#83139 and rust#84667 are resolved
+        // stack_probes: StackProbeType::Call,
+        // position_independent_executables: true,
+        // static_position_independent_executables: true,
+        // relro_level: RelroLevel::Full,
+        // relocation_model: RelocModel::Pic,
+        linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),
+        linker: Some("rust-lld".to_owned()),
+        features: "-mmx,-sse,+soft-float".to_string(),
+        executables: true,
+        disable_redzone: true,
+        panic_strategy: PanicStrategy::Abort,
+        // code_model: Some(CodeModel::Kernel),
+        ..Default::default()
+    };
+    Target {
+        llvm_target: "x86_64-unknown-none".to_string(),
+        pointer_width: 64,
+        data_layout: "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128".to_string(),
+        arch: "x86_64".to_string(),
+        options: opts,
+    }
+}
diff --git a/library/std/build.rs b/library/std/build.rs
index 43168e77296..b4a18d40452 100644
--- a/library/std/build.rs
+++ b/library/std/build.rs
@@ -29,6 +29,7 @@ fn main() {
         || target.contains("asmjs")
         || target.contains("espidf")
         || target.contains("solid")
+        || target.contains("coral")
     {
         // These platforms don't have any special requirements.
     } else {
diff --git a/library/std/src/alloc.rs b/library/std/src/alloc.rs
index 8ee55234cea..6b6b7270c13 100644
--- a/library/std/src/alloc.rs
+++ b/library/std/src/alloc.rs
@@ -318,7 +318,7 @@ fn default_alloc_error_hook(layout: Layout) {
     rtprintpanic!("memory allocation of {} bytes failed\n", layout.size());
 }
 
-#[cfg(not(test))]
+#[cfg(not(any(test, target_vendor = "coral")))]
 #[doc(hidden)]
 #[alloc_error_handler]
 #[unstable(feature = "alloc_internals", issue = "none")]
diff --git a/library/std/src/collections/hash/map.rs b/library/std/src/collections/hash/map.rs
index 53b43455b5a..ff73afd92f0 100644
--- a/library/std/src/collections/hash/map.rs
+++ b/library/std/src/collections/hash/map.rs
@@ -2933,10 +2933,17 @@ impl RandomState {
     /// ```
     #[inline]
     #[allow(deprecated)]
+    #[allow(unreachable_code)]
     // rand
     #[must_use]
     #[stable(feature = "hashmap_build_hasher", since = "1.7.0")]
     pub fn new() -> RandomState {
+        // For now Coral does not try to provide DoS-resistant hashmap, and does
+        // not yet support thread-local variables, so we just return a fixed
+        // value.
+        #[cfg(target_vendor = "coral")]
+        return RandomState { k0: 14, k1: 15 };
+
         // Historically this function did not cache keys from the OS and instead
         // simply always called `rand::thread_rng().gen()` twice. In #31356 it
         // was discovered, however, that because we re-seed the thread-local RNG
diff --git a/library/std/src/panicking.rs b/library/std/src/panicking.rs
index 2b9ae3210de..87a08b01df9 100644
--- a/library/std/src/panicking.rs
+++ b/library/std/src/panicking.rs
@@ -527,7 +527,7 @@ pub fn panicking() -> bool {
 }
 
 /// Entry point of panics from the libcore crate (`panic_impl` lang item).
-#[cfg(not(test))]
+#[cfg(not(any(test, target_vendor = "coral")))]
 #[panic_handler]
 pub fn begin_panic_handler(info: &PanicInfo<'_>) -> ! {
     struct PanicPayload<'a> {
diff --git a/library/std/src/sys/coral/env.rs b/library/std/src/sys/coral/env.rs
new file mode 100644
index 00000000000..7117a9db0ec
--- /dev/null
+++ b/library/std/src/sys/coral/env.rs
@@ -0,0 +1,9 @@
+pub mod os {
+    pub const FAMILY: &str = "coral";
+    pub const OS: &str = "";
+    pub const DLL_PREFIX: &str = "";
+    pub const DLL_SUFFIX: &str = "";
+    pub const DLL_EXTENSION: &str = "";
+    pub const EXE_SUFFIX: &str = "";
+    pub const EXE_EXTENSION: &str = "";
+}
diff --git a/library/std/src/sys/coral/mod.rs b/library/std/src/sys/coral/mod.rs
new file mode 100644
index 00000000000..3b4168d40f1
--- /dev/null
+++ b/library/std/src/sys/coral/mod.rs
@@ -0,0 +1,59 @@
+//! System bindings for the coral kernel
+//!
+//! This module contains the facade (aka platform-specific) implementations of OS level
+//! functionality for the coral kernel.
+//!
+//! This is all super highly experimental and not actually intended for wide/production use yet,
+//! it's still all in the experimental category. This will likely change over time.
+//!
+//! Currently all functions here are basically stubs that immediately return errors. The hope is
+//! that with a portability lint we can just remove all this and just omit parts of the standard
+//! library if we're compiling for the coral kernel. That way it's a compile time error for
+//! something that's guaranteed to be a runtime error!
+
+#![deny(unsafe_op_in_unsafe_fn)]
+
+#[path = "../unsupported/alloc.rs"]
+pub mod alloc;
+#[path = "../unsupported/args.rs"]
+pub mod args;
+#[path = "../unix/cmath.rs"]
+pub mod cmath;
+pub mod env;
+#[path = "../unsupported/fs.rs"]
+pub mod fs;
+#[path = "../unsupported/io.rs"]
+pub mod io;
+#[path = "../unsupported/net.rs"]
+pub mod net;
+#[path = "../unsupported/os.rs"]
+pub mod os;
+#[path = "../unix/os_str.rs"]
+pub mod os_str;
+#[path = "../unix/path.rs"]
+pub mod path;
+#[path = "../unsupported/pipe.rs"]
+pub mod pipe;
+#[path = "../unsupported/process.rs"]
+pub mod process;
+#[path = "../unsupported/stdio.rs"]
+pub mod stdio;
+#[path = "../unsupported/thread_local_dtor.rs"]
+pub mod thread_local_dtor;
+#[path = "../unsupported/thread_local_key.rs"]
+pub mod thread_local_key;
+#[path = "../unsupported/time.rs"]
+pub mod time;
+#[path = "../unsupported/condvar.rs"]
+pub mod condvar;
+#[path = "../unsupported/mutex.rs"]
+pub mod mutex;
+#[path = "../unsupported/rwlock.rs"]
+pub mod rwlock;
+#[path = "../unsupported/thread.rs"]
+pub mod thread;
+
+#[path = "../unsupported/common.rs"]
+#[deny(unsafe_op_in_unsafe_fn)]
+mod common;
+pub use common::*;
diff --git a/library/std/src/sys/mod.rs b/library/std/src/sys/mod.rs
index 167c918c94c..fcfee9c3821 100644
--- a/library/std/src/sys/mod.rs
+++ b/library/std/src/sys/mod.rs
@@ -43,6 +43,9 @@
     } else if #[cfg(target_family = "wasm")] {
         mod wasm;
         pub use self::wasm::*;
+    } else if #[cfg(target_vendor = "coral")] {
+        mod coral;
+        pub use self::coral::*;
     } else if #[cfg(all(target_vendor = "fortanix", target_env = "sgx"))] {
         mod sgx;
         pub use self::sgx::*;
diff --git a/library/std/src/sys/unsupported/thread_local_dtor.rs b/library/std/src/sys/unsupported/thread_local_dtor.rs
index 85d66098302..04c7295f0ae 100644
--- a/library/std/src/sys/unsupported/thread_local_dtor.rs
+++ b/library/std/src/sys/unsupported/thread_local_dtor.rs
@@ -1,5 +1,6 @@
 #![unstable(feature = "thread_local_internals", issue = "none")]
 
+#[allow(dead_code)]
 pub unsafe fn register_dtor(_t: *mut u8, _dtor: unsafe extern "C" fn(*mut u8)) {
     // FIXME: right now there is no concept of "thread exit", but this is likely
     // going to show up at some point in the form of an exported symbol that the
diff --git a/library/std/src/sys_common/mod.rs b/library/std/src/sys_common/mod.rs
index 804727fbc54..122d7bc0bd1 100644
--- a/library/std/src/sys_common/mod.rs
+++ b/library/std/src/sys_common/mod.rs
@@ -40,6 +40,7 @@
     if #[cfg(any(target_os = "l4re",
                  target_os = "hermit",
                  feature = "restricted-std",
+                 target_vendor = "coral",
                  all(target_family = "wasm", not(target_os = "emscripten")),
                  all(target_vendor = "fortanix", target_env = "sgx")))] {
         pub use crate::sys::net;
diff --git a/src/bootstrap/compile.rs b/src/bootstrap/compile.rs
index f05d1dcf4fc..b0a984b51e3 100644
--- a/src/bootstrap/compile.rs
+++ b/src/bootstrap/compile.rs
@@ -308,6 +308,9 @@ pub fn std_cargo(builder: &Builder<'_>, target: TargetSelection, stage: u32, car
     } else {
         let mut features = builder.std_features(target);
         features.push_str(compiler_builtins_c_feature);
+        if target.contains("coral") {
+            features.push_str(" compiler-builtins-mem");
+        }
 
         cargo
             .arg("--features")
diff --git a/src/tools/build-manifest/src/main.rs b/src/tools/build-manifest/src/main.rs
index 8a62146abfc..93fa7bb0bc0 100644
--- a/src/tools/build-manifest/src/main.rs
+++ b/src/tools/build-manifest/src/main.rs
@@ -153,6 +153,7 @@
     "x86_64-unknown-netbsd",
     "x86_64-unknown-redox",
     "x86_64-unknown-hermit",
+    "x86_64-unknown-none-coral",
 ];
 
 /// This allows the manifest to contain rust-docs for hosts that don't build
